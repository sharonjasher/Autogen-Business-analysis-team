import streamlit as st
import os
from datetime import datetime
from typing import List, Dict
from dotenv import load_dotenv
from autogen_agentchat.agents import AssistantAgent
from autogen_agentchat.teams import RoundRobinGroupChat
from autogen_agentchat.conditions import TextMentionTermination, MaxMessageTermination
from autogen_ext.models.openai import OpenAIChatCompletionClient

# Load environment variables
load_dotenv()

def generate_executive_report(analysis):
    """Generate a structured executive summary report"""
    
    # Extract key insights from agent responses
    market_insights = []
    financial_insights = []
    operational_insights = []
    
    for message in analysis['messages']:
        content = message['content']
        agent = message['agent']
        
        if 'MarketAnalyst' in agent:
            market_insights.append(content)
        elif 'FinancialStrategist' in agent:
            financial_insights.append(content)
        elif 'OperationsManager' in agent:
            operational_insights.append(content)
    
    # Generate executive summary
    exec_report = f"""
# EXECUTIVE BUSINESS ANALYSIS REPORT
## {analysis['scenario']}

**Report Date:** {analysis['timestamp'].strftime('%B %d, %Y')}
**Analysis Type:** Multi-Agent Strategic Assessment

---

## EXECUTIVE SUMMARY

### Business Overview
{analysis['description'].split('.')[0]}.

### Key Recommendations
Based on comprehensive market, financial, and operational analysis:

**üéØ IMMEDIATE ACTIONS (0-3 months)**
- Validate market positioning and competitive differentiation
- Secure financial runway and optimize cash flow
- Establish operational processes for scalability

**üìà SHORT-TERM GOALS (3-12 months)**
- Execute market penetration strategy
- Implement financial tracking and optimization
- Scale operations with standardized processes

**üöÄ LONG-TERM VISION (12+ months)**
- Establish market leadership position
- Achieve sustainable profitability targets
- Build scalable operational infrastructure

---

## STRATEGIC ANALYSIS SUMMARY

### üìä MARKET ANALYSIS
**Key Market Insights:**
"""
    
    # Add market insights in bullet format
    if market_insights:
        for insight in market_insights:
            # Extract key points (first few sentences)
            sentences = insight.split('. ')[:3]
            for sentence in sentences:
                if sentence.strip():
                    exec_report += f"‚Ä¢ {sentence.strip()}.\n"
    else:
        exec_report += "‚Ä¢ Market analysis pending - please ensure Market Analyst provides insights.\n"
    
    exec_report += f"""

**Market Opportunity Score:** ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê (Based on analysis depth and recommendations)

### üí∞ FINANCIAL ANALYSIS  
**Key Financial Insights:**
"""
    
    # Add financial insights
    if financial_insights:
        for insight in financial_insights:
            sentences = insight.split('. ')[:3]
            for sentence in sentences:
                if sentence.strip():
                    exec_report += f"‚Ä¢ {sentence.strip()}.\n"
    else:
        exec_report += "‚Ä¢ Financial analysis pending - please ensure Financial Strategist provides insights.\n"
    
    exec_report += f"""

**Financial Viability Score:** ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê (Based on analysis depth and recommendations)

### ‚öôÔ∏è OPERATIONAL ANALYSIS
**Key Operational Insights:**
"""
    
    # Add operational insights
    if operational_insights:
        for insight in operational_insights:
            sentences = insight.split('. ')[:3]
            for sentence in sentences:
                if sentence.strip():
                    exec_report += f"‚Ä¢ {sentence.strip()}.\n"
    else:
        exec_report += "‚Ä¢ Operational analysis pending - please ensure Operations Manager provides insights.\n"
    
    exec_report += f"""

**Operational Readiness Score:** ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê (Based on analysis depth and recommendations)

---

## RISK ASSESSMENT

### üî¥ HIGH PRIORITY RISKS
- **Market Risk:** Competitive pressure and market saturation
- **Financial Risk:** Cash flow management and funding requirements  
- **Operational Risk:** Scaling challenges and resource constraints

### üü° MEDIUM PRIORITY RISKS
- **Technology Risk:** Platform dependencies and technical debt
- **Regulatory Risk:** Compliance and policy changes
- **Talent Risk:** Key personnel and skill gaps

### üü¢ LOW PRIORITY RISKS
- **Brand Risk:** Reputation management
- **Supply Chain Risk:** Vendor dependencies
- **Economic Risk:** Market conditions and economic cycles

---

## SUCCESS METRICS & KPIs

### Financial KPIs
- **Revenue Growth:** Target monthly growth rate
- **Profit Margins:** Gross and net margin targets
- **Cash Flow:** Monthly cash flow projections
- **Customer Metrics:** CAC, LTV, churn rates

### Operational KPIs  
- **Efficiency Metrics:** Process optimization indicators
- **Quality Metrics:** Service/product quality measures
- **Scale Metrics:** Capacity utilization and growth indicators
- **Team Metrics:** Productivity and satisfaction scores

### Market KPIs
- **Market Share:** Competitive position tracking
- **Brand Metrics:** Awareness and perception indicators
- **Customer Metrics:** Satisfaction and retention rates
- **Growth Metrics:** Market penetration and expansion

---

## IMPLEMENTATION ROADMAP

### Phase 1: Foundation (Months 1-3)
**Market:**
- Conduct detailed competitive analysis
- Validate customer segments and personas
- Develop positioning and messaging strategy

**Financial:**
- Establish financial tracking systems
- Optimize current cost structure
- Secure necessary funding commitments

**Operations:**
- Document and standardize core processes
- Implement basic performance metrics
- Establish vendor and partner relationships

### Phase 2: Growth (Months 4-8)
**Market:**
- Launch market penetration initiatives
- Expand customer acquisition channels
- Monitor and adjust positioning based on feedback

**Financial:**
- Implement advanced financial controls
- Launch pricing optimization initiatives
- Track ROI on all growth investments

**Operations:**
- Scale operational processes
- Implement automation where possible
- Expand team and capabilities strategically

### Phase 3: Scale (Months 9-12)
**Market:**
- Evaluate expansion opportunities
- Launch retention and loyalty programs
- Establish thought leadership position

**Financial:**
- Achieve target profitability metrics
- Evaluate additional funding needs for expansion
- Implement advanced financial analytics

**Operations:**
- Full operational scalability achieved
- Advanced performance monitoring in place
- Strategic partnerships and alliances established

---

## CONCLUSION

This analysis provides a comprehensive roadmap for strategic business development. The multi-agent approach ensures all critical aspects - market positioning, financial optimization, and operational excellence - are addressed in an integrated manner.

**Next Steps:**
1. Review and approve strategic recommendations
2. Assign ownership for each implementation phase
3. Establish regular review cycles and success metrics
4. Begin immediate actions identified in Phase 1

**Success Probability:** HIGH ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê
*Based on comprehensive analysis and actionable recommendations provided*

---

*This report was generated by AutoGen Multi-Agent Business Analysis System*
*For questions or clarifications, please review the detailed agent responses*
"""
    
    return exec_report

# Page configuration
st.set_page_config(
    page_title="AutoGen Business Analysis Team",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Custom CSS for better styling
st.markdown("""
<style>
    .main-header {
        background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
        padding: 1rem;
        border-radius: 10px;
        color: white;
        text-align: center;
        margin-bottom: 2rem;
    }
    .agent-card {
        background: #f8f9fa;
        padding: 1rem;
        border-radius: 10px;
        border-left: 4px solid #667eea;
        margin-bottom: 1rem;
    }
    .scenario-card {
        background: #e3f2fd;
        padding: 1rem;
        border-radius: 10px;
        margin-bottom: 1rem;
    }
    .analysis-result {
        background: #f1f8e9;
        padding: 1rem;
        border-radius: 10px;
        border: 1px solid #4caf50;
    }
</style>
""", unsafe_allow_html=True)

# Initialize session state
if 'analysis_history' not in st.session_state:
    st.session_state.analysis_history = []
if 'current_analysis' not in st.session_state:
    st.session_state.current_analysis = None
if 'agents_initialized' not in st.session_state:
    st.session_state.agents_initialized = False

def initialize_agents():
    """Initialize the AutoGen agents"""
    try:
        api_key = os.getenv("OPENAI_API_KEY") or st.secrets.get("OPENAI_API_KEY")
        if not api_key:
            st.error("OpenAI API key not found. Please set OPENAI_API_KEY in your environment variables or Streamlit secrets.")
            return None, None, None, None
        
        # Initialize the OpenAI client
        model_client = OpenAIChatCompletionClient(
            model="gpt-4o-mini",
            api_key=api_key
        )
        
        # Agent 1: Market Research Analyst
        market_analyst = AssistantAgent(
            name="MarketAnalyst",
            model_client=model_client,
            system_message="""You are a Market Research Analyst specializing in competitive analysis and market trends.
            
            Your responsibilities:
            - Analyze market conditions and competitive landscape
            - Identify opportunities and threats in the market
            - Provide insights on customer segments and market positioning
            - Research industry trends and growth projections
            
            Always provide data-driven insights and cite your reasoning. When presenting findings, 
            structure them clearly with key metrics and actionable insights. Keep responses concise but comprehensive."""
        )
        
        # Agent 2: Financial Strategist
        financial_strategist = AssistantAgent(
            name="FinancialStrategist",
            model_client=model_client,
            system_message="""You are a Financial Strategist focused on business optimization and financial planning.
            
            Your responsibilities:
            - Analyze financial performance and KPIs
            - Develop cost optimization strategies
            - Assess investment opportunities and ROI
            - Create budget recommendations and financial projections
            - Evaluate pricing strategies and revenue models
            
            Provide specific, quantifiable recommendations with clear financial rationale.
            Always consider risk factors and present multiple scenarios when relevant. Keep responses focused and actionable."""
        )
        
        # Agent 3: Operations Manager
        operations_manager = AssistantAgent(
            name="OperationsManager",
            model_client=model_client,
            system_message="""You are an Operations Manager specializing in process optimization and implementation.
            
            Your responsibilities:
            - Design and optimize business processes
            - Identify operational inefficiencies and bottlenecks
            - Develop implementation plans for strategic initiatives
            - Assess resource allocation and capacity planning
            - Create actionable roadmaps with timelines and milestones
            
            Focus on practical, implementable solutions. Always consider feasibility, 
            resource requirements, and potential challenges in your recommendations. Keep responses structured and clear."""
        )
        
        # Create termination conditions
        termination = TextMentionTermination("ANALYSIS_COMPLETE") | MaxMessageTermination(12)
        
        # Create the team with RoundRobin orchestration
        business_analysis_team = RoundRobinGroupChat(
            participants=[market_analyst, financial_strategist, operations_manager],
            termination_condition=termination
        )
        
        return market_analyst, financial_strategist, operations_manager, business_analysis_team
    
    except Exception as e:
        st.error(f"Error initializing agents: {str(e)}")
        return None, None, None, None



def get_predefined_scenarios():
    """Return predefined business scenarios"""
    return {
        "E-commerce Expansion": {
            "description": """A mid-size retail company currently operating 50 physical stores wants to expand into e-commerce.
            They have $2M budget, 200 employees, and strong brand recognition in their region.
            Main challenges: Limited digital experience, aging customer base (avg age 45), 
            increasing competition from online retailers.""",
            "icon": "üõí"
        },
        "SaaS Product Launch": {
            "description": """A software startup has developed a project management SaaS tool targeted at remote teams.
            They have $500K seed funding, a team of 8 developers, and a functional MVP.
            Market research shows 40% growth in remote work tools, but high competition.""",
            "icon": "üíª"
        },
        "Manufacturing Optimization": {
            "description": """A manufacturing company producing automotive parts faces 20% increase in raw material costs
            and supply chain disruptions. They need to maintain profitability while meeting customer demands.
            Current capacity: 10,000 units/month, 150 employees, 3 production lines.""",
            "icon": "üè≠"
        },
        "Restaurant Chain Expansion": {
            "description": """A successful local restaurant chain (5 locations) wants to expand regionally.
            They have $1.5M investment, proven business model, and loyal customer base.
            Challenges: Finding suitable locations, maintaining quality, competition from franchises.""",
            "icon": "üçΩÔ∏è"
        },
        "Tech Startup Pivot": {
            "description": """A B2B software company needs to pivot their product strategy due to market changes.
            Current product has low adoption, $300K runway remaining, team of 12.
            Need to identify new market opportunities and optimize resource allocation.""",
            "icon": "üîÑ"
        }
    }

def run_analysis_sync(team, scenario_description):
    """Run the business analysis synchronously"""
    initial_prompt = f"""
    Business Scenario Analysis Request:
    
    {scenario_description}
    
    Team Instructions:
    1. MarketAnalyst: Start by analyzing the market conditions, competitive landscape, and opportunities
    2. FinancialStrategist: Build on the market analysis to provide financial recommendations and projections
    3. OperationsManager: Create an implementation roadmap based on the market and financial insights
    
    Each agent should:
    - Reference and build upon previous agents' insights
    - Provide specific, actionable recommendations
    - Consider interdependencies with other agents' areas
    - Keep responses concise but comprehensive
    
    End the analysis when all three perspectives have been thoroughly covered by typing "ANALYSIS_COMPLETE"
    """
    
    # Run the team and collect results
    try:
        result = team.run(task=initial_prompt)
        
        # Extract messages from the result
        messages = []
        if hasattr(result, 'messages'):
            for msg in result.messages:
                # Handle different message structures
                if hasattr(msg, 'source') and hasattr(msg, 'content'):
                    messages.append({
                        "agent": getattr(msg, 'source', 'Unknown'),
                        "content": getattr(msg, 'content', str(msg)),
                        "timestamp": datetime.now()
                    })
                elif hasattr(msg, 'sender') and hasattr(msg, 'content'):
                    messages.append({
                        "agent": getattr(msg, 'sender', 'Unknown'),
                        "content": getattr(msg, 'content', str(msg)),
                        "timestamp": datetime.now()
                    })
                else:
                    # Fallback for unknown message structure
                    messages.append({
                        "agent": "System",
                        "content": str(msg),
                        "timestamp": datetime.now()
                    })
        else:
            # If result doesn't have messages attribute, treat the whole result as content
            messages.append({
                "agent": "Team Analysis",
                "content": str(result),
                "timestamp": datetime.now()
            })
        
        return messages
    
    except Exception as e:
        st.error(f"Error during team analysis: {str(e)}")
        return [{
            "agent": "Error",
            "content": f"Analysis failed: {str(e)}",
            "timestamp": datetime.now()
        }]

def main():
    # Header
    st.markdown("""
    <div class="main-header">
        <h1>üìä AutoGen Business Analysis Team</h1>
        <p>Multi-Agent AI System for Comprehensive Business Analysis</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Sidebar
    with st.sidebar:
        st.header("ü§ñ Agent Team")
        
        # Agent information
        agents_info = [
            {"name": "Market Analyst", "icon": "üìà", "role": "Market research and competitive analysis"},
            {"name": "Financial Strategist", "icon": "üí∞", "role": "Financial planning and optimization"},
            {"name": "Operations Manager", "icon": "‚öôÔ∏è", "role": "Process optimization and implementation"}
        ]
        
        for agent in agents_info:
            st.markdown(f"""
            <div class="agent-card">
                <h4>{agent['icon']} {agent['name']}</h4>
                <p>{agent['role']}</p>
            </div>
            """, unsafe_allow_html=True)
        
        st.markdown("---")
        
        # Analysis History
        st.header("üìö Analysis History")
        if st.session_state.analysis_history:
            for i, analysis in enumerate(reversed(st.session_state.analysis_history[-5:])):
                if st.button(f"Analysis {len(st.session_state.analysis_history) - i}", key=f"history_{i}"):
                    st.session_state.current_analysis = analysis
        else:
            st.write("No previous analyses")
        
        if st.button("üóëÔ∏è Clear History"):
            st.session_state.analysis_history = []
            st.session_state.current_analysis = None
            st.rerun()
    
    # Main content area
    tab1, tab2, tab3 = st.tabs(["üéØ Analysis", "üìä Results", "‚ÑπÔ∏è About"])
    
    with tab1:
        st.header("Business Scenario Analysis")
        
        # Scenario selection
        analysis_type = st.radio(
            "Choose analysis type:",
            ["Predefined Scenarios", "Custom Scenario"],
            horizontal=True
        )
        
        if analysis_type == "Predefined Scenarios":
            scenarios = get_predefined_scenarios()
            
            st.subheader("Select a Scenario")
            cols = st.columns(2)
            
            selected_scenario = None
            scenario_desc = None
            
            for i, (name, details) in enumerate(scenarios.items()):
                col = cols[i % 2]
                with col:
                    if st.button(f"{details['icon']} {name}", key=f"scenario_{i}", use_container_width=True):
                        selected_scenario = name
                        scenario_desc = details['description']
            
            if selected_scenario:
                st.success(f"Selected: {selected_scenario}")
                with st.expander("Scenario Details", expanded=True):
                    st.write(scenario_desc)
        
        else:  # Custom Scenario
            st.subheader("Create Custom Scenario")
            
            col1, col2 = st.columns(2)
            
            with col1:
                company_type = st.text_input("Company Type/Industry")
                company_size = st.text_input("Company Size (employees/revenue)")
                budget = st.text_input("Available Budget")
            
            with col2:
                current_situation = st.text_area("Current Situation/Challenge")
                timeline = st.text_input("Timeline for Implementation")
                specific_goals = st.text_area("Specific Goals/Objectives")
            
            if all([company_type, company_size, current_situation, specific_goals]):
                scenario_desc = f"""
                Business Analysis Request:
                
                Company: {company_type}
                Size: {company_size}
                Current Situation: {current_situation}
                Budget: {budget}
                Timeline: {timeline}
                Objectives: {specific_goals}
                
                Please provide a comprehensive analysis with market, financial, and operational perspectives.
                """
                selected_scenario = "Custom Analysis"
            else:
                scenario_desc = None
                selected_scenario = None
        
        # Run Analysis Button
        if scenario_desc and st.button("üöÄ Run Analysis", type="primary", use_container_width=True):
            if not st.session_state.agents_initialized:
                with st.spinner("Initializing AI agents..."):
                    market_analyst, financial_strategist, operations_manager, business_analysis_team = initialize_agents()
                    if business_analysis_team:
                        st.session_state.market_analyst = market_analyst
                        st.session_state.financial_strategist = financial_strategist
                        st.session_state.operations_manager = operations_manager
                        st.session_state.business_analysis_team = business_analysis_team
                        st.session_state.agents_initialized = True
                    else:
                        st.error("Failed to initialize agents. Please check your API key.")
                        st.stop()
            
            with st.spinner("ü§ñ AI agents are analyzing your business scenario..."):
                try:
                    messages = run_analysis_sync(st.session_state.business_analysis_team, scenario_desc)
                    
                    analysis_result = {
                        "scenario": selected_scenario,
                        "description": scenario_desc,
                        "messages": messages,
                        "timestamp": datetime.now()
                    }
                    
                    st.session_state.analysis_history.append(analysis_result)
                    st.session_state.current_analysis = analysis_result
                    st.success("Analysis completed! Check the Results tab.")
                    
                except Exception as e:
                    st.error(f"Error during analysis: {str(e)}")
                    st.error("Please check your OpenAI API key and try again.")
    
    with tab2:
        st.header("Analysis Results")
        
        if st.session_state.current_analysis:
            analysis = st.session_state.current_analysis
            
            st.subheader(f"üìã {analysis['scenario']}")
            st.write(f"*Analyzed on: {analysis['timestamp'].strftime('%Y-%m-%d %H:%M:%S')}*")
            
            # Display scenario
            with st.expander("Scenario Details"):
                st.write(analysis['description'])
            
            # Display agent responses
            st.subheader("ü§ñ Agent Analysis")
            
            for message in analysis['messages']:
                agent_name = message['agent']
                content = message['content']
                
                # Agent-specific styling
                if agent_name == "MarketAnalyst":
                    st.markdown("### üìà Market Analyst")
                    with st.container():
                        st.info(content)
                elif agent_name == "FinancialStrategist":
                    st.markdown("### üí∞ Financial Strategist")
                    with st.container():
                        st.success(content)
                elif agent_name == "OperationsManager":
                    st.markdown("### ‚öôÔ∏è Operations Manager")
                    with st.container():
                        st.warning(content)
                
                st.markdown("---")
            
            # Generate Executive Summary Report
            if st.button("üìÑ Generate Executive Report", type="secondary"):
                executive_report = generate_executive_report(analysis)
                
                st.download_button(
                    label="Download Executive Report",
                    data=executive_report,
                    file_name=f"executive_report_{analysis['timestamp'].strftime('%Y%m%d_%H%M%S')}.md",
                    mime="text/markdown"
                )
            
            # Generate detailed report
            if st.button("üìã Generate Detailed Report"):
                detailed_report = f"""
# Detailed Business Analysis Report
## {analysis['scenario']}
**Date:** {analysis['timestamp'].strftime('%Y-%m-%d %H:%M:%S')}

## Business Scenario
{analysis['description']}

## Agent Analysis Results
"""
                for message in analysis['messages']:
                    detailed_report += f"\n### {message['agent']}\n{message['content']}\n---\n"
                
                st.download_button(
                    label="Download Detailed Report", 
                    data=detailed_report,
                    file_name=f"detailed_analysis_{analysis['timestamp'].strftime('%Y%m%d_%H%M%S')}.md",
                    mime="text/markdown"
                )
        
        else:
            st.info("No analysis results yet. Run an analysis in the Analysis tab.")
    
    with tab3:
        st.header("About AutoGen Business Analysis Team")
        
        st.markdown("""
        ### üéØ Purpose
        This multi-agent AI system provides comprehensive business analysis by combining expertise from three specialized agents:
        
        - **Market Analyst**: Analyzes market conditions, competitive landscape, and opportunities
        - **Financial Strategist**: Provides financial analysis, ROI calculations, and budget recommendations
        - **Operations Manager**: Creates implementation roadmaps and optimizes business processes
        
        ### üîß Technology Stack
        - **AutoGen**: Multi-agent orchestration framework
        - **OpenAI GPT-4**: Large language model for intelligent analysis
        - **Streamlit**: Interactive web interface
        - **RoundRobin Chat**: Collaborative agent communication
        
        ### üìà Use Cases
        - Strategic business planning
        - Investment decision analysis
        - Market entry strategies
        - Operational optimization
        - Risk assessment and mitigation
        
        ### üöÄ Getting Started
        1. Set up your OpenAI API key
        2. Select a predefined scenario or create a custom one
        3. Click "Run Analysis" to start the multi-agent analysis
        4. Review results and download reports
        
        ### üîë API Key Setup
        Add your OpenAI API key as an environment variable:
        ```
        OPENAI_API_KEY=your_api_key_here
        ```
        """)

if __name__ == "__main__":
    main()
